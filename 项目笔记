创建玩家身体代码CharacterBody2D ，然后创建子节点玩家动画AnimatedSprite2D 新建一个Sprite Frame 导入动画
给玩家设置一个碰撞箱 circleShape2D 。链接主场景 给主场景一个相机节点Camera2D
然后给玩家身体CharacterBody2D节点 上自带的脚本模板

extends CharacterBody2D

#速度代码
const SPEED = 300.0
#跳跃高度
const JUMP_VELOCITY = -400.0


func _physics_process(delta: float) -> void:
	# Add the gravity
#判断玩家是否在平台上没有就掉下去
	if not is_on_floor():
		velocity += get_gravity() * delta

	# Handle jump.
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis("ui_left", "ui_right")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()

#给玩家一个平台 主场景添加一个新节点2D静态物体StaticBody2D 然后给StaticBody2D一个碰撞箱子CollisionShape2D使用WorldBoundaryShape2D(一种无线延申的空气墙) 承载玩家
然后添加瓷砖地图节点 TileMapLayer 检查器新建Tile Set  然后加载本地资源包 注意切割 16 * 16

添加完地图过后 因为我们不想玩家能和所有的图快碰撞所以 设置图层 再检查器里打开Physics Laters  选择下方检查窗绘制
选择的时候 键盘C是清楚 F是复原
下面设置相机跟随玩家  把相机设置为玩家的子节点，就会跟着玩家跑了 。然后为了确保玩家在游戏正中心也让运动更流畅 可以打开相机的运动平滑设置 position Smoothing.
移动平台：每当我们添加一个新元素的时候 第一次时间 想到的是新建场景  谢谢
新场景 新节点 AnimateableBody2D可 动 画 的 2D 物理物体  添加Sprite2D 图片节点 然后裁剪掉多余平台图片 Region-Enabeld-编辑区域 开启像素吸附
还有一步 给他添加一个长方形碰撞形状 添加节点CollisionShape2D 设置-RE
然后链接主场景 修改玩家和平台优先渲染值Z值 去到玩家场景 找到Ordering-z Index  所有的物体默认渲染是0 .
给平台加一个单方向碰撞 CollisionShape2D  - One Way Colli

然后下面让平台动起来 添加新节点动画播放器AnimationPlayer,他几乎能让所有东西动起来
添加动画move 找到平台Transform-posiontion 旁边的小钥匙 添加关键帧 然后 选中时间轴线华东一秒 选中平台移动 再点击小钥匙  设置循环播放 自动播放

添加可拾取硬币 创建新节点新场景 Area2D	他不会与其他物体进行碰撞，只会有一个检测区域
常见子节点AnimatedSprite2D 添加金币动画 自动播放 创建其碰撞节点 Collisiontion2D
然后创建硬币脚本代码 空白模板  添加碰撞信号 On_body_entered() 检测到玩家碰撞之后 摧毁当前节点
	func _on_body_entered(body: Node2D) -> void:
		queue_free()

游戏结束： 相机会随玩家下坠 改成不下坠 点击相机节点检查器 limT bottom设置像素 表示相机最低到那个距离 尺子工具从横轴开始测量 Smoothed 开启平滑模式
我们新建一个节点Area2D 在地图下方检测玩家是否掉下去了  掉下去重启游戏 设置碰撞collisiontion图层为2  命名为 KillZone 然后链接主场景在添加碰撞箱子
然后为Killzone添加脚本   另外添加一个计时器 计时一秒 One_shot 然后重启场景
func _on_body_entered(body: Node2D) -> void:
	print("你掉下来了")
	timer.start()


func _on_timer_timeout() -> void:
	#重启场景树
	get_tree().reload_current_scene()

敌人：创建Node2D 创建AnimatedSprite2D节点  加载之前的 Killzone 碰撞游戏结束节点， Killzone 下创建碰撞箱子节点CollsionTion2D 节点

接下来让史莱姆移动 在史莱姆根节点加载脚本

extends Node2D

var Speed : float = 100
var fangxiang : int = 1

func _physics_process(delta: float) -> void:
	position.x += fangxiang * Speed * delta

接下来让史莱姆左右摇摆 加入新节点 射线节点 RayCast2D 然后在观察窗口里调整方向 创建两个节点两个方向 然后敌人改变方向动画也改变方向
找到 AnimatedSprite2D offset- Filp 开启后反转  加入代码调用

func _physics_process(delta: float) -> void:
	if right.is_colliding() :
		fangxiang = -1
		animated_sprite.flip_h=true
		
	elif left.is_colliding() :
		fangxiang = 1
		animated_sprite.flip_h=false
死亡2.0  在死亡的时候加入慢放 修改游戏时间尺度 打开游戏结束代码
func _on_body_entered(body: Node2D) -> void:
	print("你掉下来了")
	#设计时间以百分之五十 流逝
	Engine.time_scale = 0.5
	
	timer.start()
	
	


func _on_timer_timeout() -> void:
	#设计时间流逝回归正常
	Engine.time_scale =1
	#重启场景树
	get_tree().reload_current_scene()
让我们设置死亡时 把玩家的碰撞箱子去掉 然后掉下去
func _on_body_entered(body: Node2D) -> void:
	print("你掉下来了")
	#设计时间以百分之五十 流逝
	Engine.time_scale = 0.5
	body.get_node("CollisionShape2D").queue_free()
	timer.start()

玩家2.0 给玩家重新映射键位

var direction := Input.get_axis("zuo", "you") 这一行基于玩家的输入 direction 来决定方向
大于0是右  小于0是左  以此来反转玩家 动画
	@onready var animated_sprite: AnimatedSprite2D = $AnimatedSprite
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis("zuo", "you")
	
	if direction >0 :
		animated_sprite.flip_h = false
	elif direction<0:
		animated_sprite.flip_h=true
	
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

添加跑步动画和跳跃 动画 并添加代码加载 跑步和跳跃动画的播放
	#如果玩家站在地板上 这个是文件自带函数 is_on_floor()
	if  is_on_floor() :
		if direction == 0 :
			animated_sprite.play("idel")
		else :
			animated_sprite.play("run")
	else :
		animated_sprite.play("Tiao")

下面添加游戏背景 文字 Label节点 其属性 Autowrap- word 可以换行

添加一个游戏管理器并 显示得分 新建节点 node  添加脚本
extends Node

var score  = 0

func add_defeng():
	score += 1 


去到硬币节点代码 调用 游戏管理器  将游戏管理器作为唯一单例节点
然后显示文本得分同步代码如下
extends Node

var score  = 0
@onready var label_4: Label = $Label4

func add_defeng():
	
	score += 1 
	
	label_4.text = "你终于发现了华点你目前的得分是 " + str(score)
	print(score)

设置背景音乐 添加背景音乐 节点AudioStreamPlayer
资料包设置循环播放  检查器设置自动播放 AutopLay 启用  设置 总线路音频 bus
设置当前音乐节点为场景 且全局配置自动播放 独立场景树之外不会随着场景重置 而重置
去到硬币场景 添加拾取音效  然后用 动画播放器 设置硬币可视关键帧率visibillty-visibel  然后 设置音乐播放帧率 设置箱子关闭 disabeld  设置coin删除节点函数 
调用函数右键添加关键帧率 quee

记得删除硬币代码 然后在硬币代码里调用动画播放器



